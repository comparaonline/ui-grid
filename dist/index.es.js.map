{"version":3,"file":"index.es.js","sources":["../node_modules/classnames/index.js","../src/components/utils.js","../src/components/Row.js","../src/components/Column.js"],"sourcesContent":["/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import PropTypes from 'prop-types';\nimport breakpoints from '../config/breakpoints.json';\n\nconst bps = Object.keys(breakpoints);\nconst toCamelCase = bp => `${bp.substr(0, 1).toUpperCase()}${bp.substr(1)}`;\n\nexport const getBreakpointPropName = (bp, prop) => `${prop}On${toCamelCase(bp)}`;\n\nconst getBooleanClassNames = (props, booleanProps) => booleanProps.reduce(\n  (names, prop) => names.concat(props[prop] ? ` ${prop}` : ''), '');\n\nconst getBreakpointClassName = (props, bp) => (props[bp] ? ` ${bp}-${props[bp]}` : '');\n\nconst getBreakpointNumericClassName = (props, numericProps, bp) => numericProps.reduce(\n  (names, prop) => {\n    const propValue = props[getBreakpointPropName(bp, prop)];\n    return names.concat(propValue ? ` ${bp}-${prop}-${propValue}` : '');\n  }, '');\n\nconst getBreakpointBooleanClassName = (props, booleanProps, bp) => booleanProps.reduce(\n  (names, prop) => names.concat(props[getBreakpointPropName(bp, prop)] ? ` ${bp}-${prop}` : ''), '');\n\nconst getBreakpointVisibilityClassName = (props, booleanProps, bp) => booleanProps.reduce(\n  (names, prop) => names.concat(props[getBreakpointPropName(bp, prop)] ? ` ${prop}-for-${bp}` : ''), '');\n\nconst generateBreakpointClassNames = (props, propNames, bp) => ''.concat(\n  propNames.include ? getBreakpointClassName(props, bp) : '',\n  propNames.numeric ? getBreakpointNumericClassName(props, propNames.numeric, bp) : '',\n  propNames.boolean ? getBreakpointBooleanClassName(props, propNames.boolean, bp) : '',\n  propNames.visibility ? getBreakpointVisibilityClassName(props, propNames.visibility, bp) : ''\n);\n\n/**\n * Generate string with classnames from props names and breakpoints\n *\n * @param {Object} props\n * @param {String Array} numericProps\n * @param {String Array} booleanProps\n * @param {Boolean} hasBreakpoint\n * @returns {String}\n */\nexport const generateClassNames = (props, propNames) => ''.concat(\n  propNames.boolean ? getBooleanClassNames(props, propNames.boolean) : '',\n  propNames.breakpoints ?\n    bps.reduce((className, bp) => className.concat(\n      generateBreakpointClassNames(props, propNames.breakpoints, bp)\n    ), '') : ''\n);\n\nconst getBooleanTypes = booleanProps => booleanProps.reduce(\n  (result, prop) => Object.assign(result, { [prop]: PropTypes.bool }), {});\n\nconst getBreakpointType = bp => ({ [bp]: PropTypes.number });\n\nconst getBreakpointGenericType = (props, bp, type) => props.reduce(\n  (result, prop) => Object.assign(result, { [getBreakpointPropName(bp, prop)]: type }), {});\n\nconst generateBreakpointTypes = (propNames, bp) => Object.assign(\n  propNames.include ? getBreakpointType(bp) : {},\n  propNames.numeric ? getBreakpointGenericType(propNames.numeric, bp, PropTypes.number) : {},\n  propNames.boolean ? getBreakpointGenericType(propNames.boolean, bp, PropTypes.bool) : {},\n  propNames.visibility ? getBreakpointGenericType(propNames.visibility, bp, PropTypes.bool) : {}\n);\n\n/**\n * Generate object with prop types from props names and breakpoints\n *\n * @param {String Array} numericProps\n * @param {String Array} booleanProps\n * @param {Boolean} hasBreakpoint\n * @returns {Object}\n */\nexport const generatePropTypes = (propNames) =>\n  Object.assign(\n    propNames.boolean ? getBooleanTypes(propNames.boolean) : {},\n    bps.reduce((result, bp) => Object.assign(\n      result,\n      generateBreakpointTypes(propNames.breakpoints, bp)\n    ), {})\n  );\n","import React from 'react';\nimport cx from 'classnames';\nimport { generateClassNames, generatePropTypes } from './utils';\n\nexport const propNames = {\n  breakpoints: {\n    include: false,\n    numeric: ['up'],\n    boolean: ['collapse', 'uncollapse'],\n    visibility: ['hide', 'show']\n  },\n  boolean: ['collapse', 'expanded']\n};\n\nconst Row = (props) => {\n  const className = cx(\n    `row${generateClassNames(props, propNames)}`,\n    { 'flex-row': props.equalHeightColumns },\n    props.className\n  );\n\n  return (\n    <div className={className}>\n      {props.children}\n    </div>\n  );\n};\n\nRow.propTypes = generatePropTypes(propNames);\n\nexport default Row;\n","import React from 'react';\nimport cx from 'classnames';\nimport { generateClassNames, generatePropTypes } from './utils';\n\nexport const propNames = {\n  breakpoints: {\n    include: true,\n    numeric: ['pull', 'push', 'offset'],\n    boolean: ['centered', 'uncentered'],\n    visibility: ['hide', 'show']\n  }\n};\n\nconst Column = (props) => {\n  const className = cx(\n    props.className,\n    `column${generateClassNames(props, propNames)}`\n  );\n\n  return (\n    <div className={className}>{props.children}</div>\n  );\n};\n\nColumn.propTypes = generatePropTypes(propNames);\n\nexport default Column;\n"],"names":["classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","apply","key","hasOwn","call","join","hasOwnProperty","module","exports","window","bps","Object","keys","breakpoints","toCamelCase","bp","substr","toUpperCase","getBreakpointPropName","prop","getBooleanClassNames","props","booleanProps","reduce","names","concat","getBreakpointClassName","getBreakpointNumericClassName","numericProps","propValue","getBreakpointBooleanClassName","getBreakpointVisibilityClassName","generateBreakpointClassNames","propNames","include","numeric","boolean","visibility","generateClassNames","className","getBooleanTypes","result","assign","PropTypes","bool","getBreakpointType","number","getBreakpointGenericType","type","generateBreakpointTypes","generatePropTypes","Row","cx","flex-row","equalHeightColumns","React","children","propTypes","Column"],"mappings":"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"}